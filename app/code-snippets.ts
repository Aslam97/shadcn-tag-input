export const tagInputCode =
  'import React from "react";\nimport { Input } from "./ui/input";\nimport { Button } from "./ui/button";\nimport { X } from "lucide-react";\nimport { cn } from "@/lib/utils";\nimport { cva, type VariantProps } from "class-variance-authority";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from "@/components/ui/command";\nimport { toast } from "./ui/use-toast";\nimport { v4 as uuid } from "uuid";\n\nconst tagVariants = cva(\n  "transition-all border inline-flex items-center text-sm pl-2 rounded-md",\n  {\n    variants: {\n      variant: {\n        default: "bg-secondary text-secondary-foreground hover:bg-secondary/80",\n        primary:\n          "bg-primary border-primary text-primary-foreground hover:bg-primary/90",\n        destructive:\n          "bg-destructive border-destructive text-destructive-foreground hover:bg-destructive/90",\n      },\n      size: {\n        sm: "text-xs h-7",\n        md: "text-sm h-8",\n        lg: "text-base h-9",\n        xl: "text-lg h-10",\n      },\n      shape: {\n        default: "rounded-sm",\n        rounded: "rounded-full",\n        square: "rounded-none",\n        pill: "rounded-lg",\n      },\n      borderStyle: {\n        default: "border-solid",\n        none: "border-none",\n      },\n      textCase: {\n        uppercase: "uppercase",\n        lowercase: "lowercase",\n        capitalize: "capitalize",\n      },\n      interaction: {\n        clickable: "cursor-pointer hover:shadow-md",\n        nonClickable: "cursor-default",\n      },\n      animation: {\n        none: "",\n        fadeIn: "animate-fadeIn",\n        slideIn: "animate-slideIn",\n        bounce: "animate-bounce",\n      },\n      textStyle: {\n        normal: "font-normal",\n        bold: "font-bold",\n        italic: "italic",\n        underline: "underline",\n        lineThrough: "line-through",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n      size: "md",\n      shape: "default",\n      borderStyle: "default",\n      textCase: "capitalize",\n      interaction: "nonClickable",\n      animation: "fadeIn",\n      textStyle: "normal",\n    },\n  }\n);\n\nexport enum Delimiter {\n  Comma = ",",\n  Enter = "Enter",\n  Space = " ",\n}\n\ntype OmittedInputProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  "size" | "value"\n>;\n\nexport type Tag = {\n  id: string;\n  text: string;\n};\n\nexport interface TagInputProps\n  extends OmittedInputProps,\n    VariantProps<typeof tagVariants> {\n  placeholder?: string;\n  tags: Tag[];\n  setTags: React.Dispatch<React.SetStateAction<Tag[]>>;\n  enableAutocomplete?: boolean;\n  autocompleteOptions?: Tag[];\n  maxTags?: number;\n  minTags?: number;\n  readOnly?: boolean;\n  disabled?: boolean;\n  onTagAdd?: (tag: string) => void;\n  onTagRemove?: (tag: string) => void;\n  allowDuplicates?: boolean;\n  validateTag?: (tag: string) => boolean;\n  delimiter?: Delimiter;\n  showCount?: boolean;\n  placeholderWhenFull?: string;\n  sortTags?: boolean;\n  delimiterList?: string[];\n  truncate?: number;\n  minLength?: number;\n  maxLength?: number;\n  value?: string | number | readonly string[] | { id: string; text: string }[];\n  autocompleteFilter?: (option: string) => boolean;\n  direction?: "row" | "column";\n  onInputChange?: (value: string) => void;\n  customTagRenderer?: (tag: Tag) => React.ReactNode;\n  onFocus?: React.FocusEventHandler<HTMLInputElement>;\n  onBlur?: React.FocusEventHandler<HTMLInputElement>;\n  onTagClick?: (tag: Tag) => void;\n}\n\nconst TagInput = React.forwardRef<HTMLInputElement, TagInputProps>(\n  (props, ref) => {\n    const {\n      id,\n      placeholder,\n      tags,\n      setTags,\n      variant,\n      size,\n      shape,\n      className,\n      enableAutocomplete,\n      autocompleteOptions,\n      maxTags,\n      delimiter = Delimiter.Comma,\n      onTagAdd,\n      onTagRemove,\n      allowDuplicates,\n      showCount,\n      validateTag,\n      placeholderWhenFull = "Max tags reached",\n      sortTags,\n      delimiterList,\n      truncate,\n      autocompleteFilter,\n      borderStyle,\n      textCase,\n      interaction,\n      animation,\n      textStyle,\n      minLength,\n      maxLength,\n      direction = "row",\n      onInputChange,\n      customTagRenderer,\n      onFocus,\n      onBlur,\n      onTagClick,\n    } = props;\n\n    const [inputValue, setInputValue] = React.useState("");\n    const [tagCount, setTagCount] = React.useState(Math.max(0, tags.length));\n    const inputRef = React.useRef<HTMLInputElement>(null);\n\n    if (\n      (maxTags !== undefined && maxTags < 0) ||\n      (props.minTags !== undefined && props.minTags < 0)\n    ) {\n      console.warn("maxTags and minTags cannot be less than 0");\n      toast({\n        title: "maxTags and minTags cannot be less than 0",\n        description:\n          "Please set maxTags and minTags to a value greater than or equal to 0",\n        variant: "destructive",\n      });\n      return null;\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = e.target.value;\n      setInputValue(newValue);\n      onInputChange?.(newValue);\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (\n        delimiterList\n          ? delimiterList.includes(e.key)\n          : e.key === delimiter || e.key === Delimiter.Enter\n      ) {\n        e.preventDefault();\n        const newTagText = inputValue.trim();\n\n        if (validateTag && !validateTag(newTagText)) {\n          return;\n        }\n\n        if (minLength && newTagText.length < minLength) {\n          console.warn("Tag is too short");\n          toast({\n            title: "Tag is too short",\n            description: "Please enter a tag with more characters",\n            variant: "destructive",\n          });\n          return;\n        }\n\n        // Validate maxLength\n        if (maxLength && newTagText.length > maxLength) {\n          toast({\n            title: "Tag is too long",\n            description: "Please enter a tag with less characters",\n            variant: "destructive",\n          });\n          console.warn("Tag is too long");\n          return;\n        }\n\n        const newTagId = uuid();\n\n        if (\n          newTagText &&\n          (allowDuplicates || !tags.some((tag) => tag.text === newTagText)) &&\n          (maxTags === undefined || tags.length < maxTags)\n        ) {\n          setTags([...tags, { id: newTagId, text: newTagText }]);\n          onTagAdd?.(newTagText);\n          setTagCount((prevTagCount) => prevTagCount + 1);\n        }\n        setInputValue("");\n      }\n    };\n\n    const removeTag = (idToRemove: string) => {\n      setTags(tags.filter((tag) => tag.id !== idToRemove));\n      onTagRemove?.(tags.find((tag) => tag.id === idToRemove)?.text || "");\n      setTagCount((prevTagCount) => prevTagCount - 1);\n    };\n\n    const filteredAutocompleteOptions = autocompleteFilter\n      ? autocompleteOptions?.filter((option) => autocompleteFilter(option.text))\n      : autocompleteOptions;\n\n    const displayedTags = sortTags ? [...tags].sort() : tags;\n\n    const truncatedTags = truncate\n      ? tags.map((tag) => ({\n          id: tag.id,\n          text:\n            tag.text?.length > truncate\n              ? `${tag.text.substring(0, truncate)}...`\n              : tag.text,\n        }))\n      : displayedTags;\n\n    return (\n      <div className="w-full">\n        <div\n          className={cn(\n            "rounded-md",\n            {\n              "flex flex-wrap gap-2": direction === "row",\n              "flex flex-col gap-2": direction === "column",\n            },\n            { "mb-3": tags.length !== 0 }\n          )}\n        >\n          {truncatedTags.map((tagObj) =>\n            customTagRenderer ? (\n              customTagRenderer(tagObj)\n            ) : (\n              <span\n                key={tagObj.id}\n                className={cn(\n                  tagVariants({\n                    variant,\n                    size,\n                    shape,\n                    borderStyle,\n                    textCase,\n                    interaction,\n                    animation,\n                    textStyle,\n                  }),\n                  {\n                    "justify-between": direction === "column",\n                  }\n                )}\n                onClick={() => onTagClick?.(tagObj)}\n              >\n                {tagObj.text}\n                <Button\n                  type="button"\n                  variant="ghost"\n                  onClick={(e) => {\n                    e.stopPropagation(); // Prevent event from bubbling up to the tag span\n                    removeTag(tagObj.id);\n                  }}\n                  className={cn("py-1 px-3 h-full hover:bg-transparent")}\n                >\n                  <X size={14} />\n                </Button>\n              </span>\n            )\n          )}\n        </div>\n        {enableAutocomplete ? (\n          <>\n            <Command className="border mt-2 sm:min-w-[450px]">\n              <CommandInput\n                placeholder={\n                  maxTags !== undefined && tags.length >= maxTags\n                    ? placeholderWhenFull\n                    : placeholder\n                }\n                disabled={maxTags !== undefined && tags.length >= maxTags}\n                onFocus={onFocus}\n                onBlur={onBlur}\n              />\n              <CommandList>\n                <CommandEmpty>No results found.</CommandEmpty>\n                <CommandGroup heading="Suggestions">\n                  {filteredAutocompleteOptions?.map((optionObj) => (\n                    <CommandItem\n                      key={uuid()}\n                      className={`${\n                        maxTags !== undefined && tags.length >= maxTags\n                          ? "cursor-not-allowed"\n                          : "cursor-pointer"\n                      }`}\n                    >\n                      <div\n                        className={`w-full ${\n                          maxTags !== undefined && tags.length >= maxTags\n                            ? "cursor-not-allowed"\n                            : "cursor-pointer"\n                        }`}\n                        onClick={() => {\n                          if (\n                            optionObj.text &&\n                            (allowDuplicates ||\n                              !tags.some(\n                                (tag) => tag.text === optionObj.text\n                              )) &&\n                            (maxTags === undefined || tags.length < maxTags)\n                          ) {\n                            setTags([...tags, optionObj]);\n                            onTagAdd?.(optionObj.text);\n                            setTagCount((prevTagCount) => prevTagCount + 1);\n                          }\n                        }}\n                      >\n                        {optionObj.text}\n                      </div>\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              </CommandList>\n            </Command>\n            {maxTags && (\n              <div className="flex">\n                <span className="text-muted-foreground text-sm mt-1 ml-auto">\n                  {`${tagCount}`}/{`${maxTags}`}\n                </span>\n              </div>\n            )}\n          </>\n        ) : (\n          <>\n            <Input\n              ref={inputRef}\n              id={id}\n              type="text"\n              placeholder={\n                maxTags !== undefined && tags.length >= maxTags\n                  ? placeholderWhenFull\n                  : placeholder\n              }\n              value={inputValue}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              onFocus={onFocus}\n              onBlur={onBlur}\n              className={className}\n              autoComplete={enableAutocomplete ? "on" : "off"}\n              list={enableAutocomplete ? "autocomplete-options" : undefined}\n              disabled={maxTags !== undefined && tags.length >= maxTags}\n            />\n            {showCount && maxTags && (\n              <div className="flex">\n                <span className="text-muted-foreground text-sm mt-1 ml-auto">\n                  {`${tagCount}`}/{`${maxTags}`}\n                </span>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    );\n  }\n);\n\nTagInput.displayName = "TagInput";\n\nexport { TagInput };\n';

export const tagInputDemoCode =
  'import {\n    Form,\n    FormControl,\n    FormDescription,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage,\n} from "@/components/ui/form"\nimport { Tag, TagInput } from \'@/components/tag-input\'\nimport Link from \'next/link\'\nimport { Button, buttonVariants } from "@/components/ui/button"\nimport { z } from "zod"\nimport { useForm } from "react-hook-form"\nimport { zodResolver } from "@hookform/resolvers/zod"\nimport React from "react"\nimport { toast } from "@/components/ui/use-toast"\n\nconst FormSchema = z.object({\n    topics: z.array(z.object({\n        id: z.string(),\n        text: z.string()\n    })),\n});\n  \nexport default function Hero(){\n\n    const form = useForm<z.infer<typeof FormSchema>>({\n        resolver: zodResolver(FormSchema)\n    })\n\n    const [tags, setTags] = React.useState<Tag[]>([]);\n\n    const { setValue } = form;\n\n    function onSubmit(data: z.infer<typeof FormSchema>) {\n        toast({\n          title: "You submitted the following values:",\n          description: (\n            <pre className="mt-2 w-[340px] rounded-md bg-slate-950 p-4">\n              <code className="text-white">{JSON.stringify(data, null, 2)}</code>\n            </pre>\n          ),\n        })\n    }\n\n    return (\n        <section className="z-10 max-w-5xl w-full flex flex-col items-center text-center gap-5">\n            <div className="z-10 w-full flex flex-col items-center text-center gap-5">\n                <h1 className=\'scroll-m-20 text-4xl font-bold tracking-tight\'>Shadcn Tag Input</h1>\n                <p className=\'text-muted-foreground max-w-[450px]\'>An implementation of a Tag Input component built on top of Shadcn UI&apos;s input component.</p>\n                <div className=\'flex gap-2 mt-1\'>\n                    <Link \n                        href="#try"\n                        className={`${buttonVariants({ variant: "default", size: "lg" })} min-w-[150px] shadow-sm`}\n                    >\n                        Try it out\n                    </Link>\n                    <Link \n                        href="https://github.com/JaleelB/shadcn-tag-input"\n                        className={`${buttonVariants({ variant: "secondary", size: "lg" })} shadow-sm`}\n                    >\n                        Github\n                    </Link>\n                </div>\n            </div>\n\n            <div id="try" className="w-full py-8">\n                <div className=\'w-full relative my-4 flex flex-col space-y-2\'>\n                <div className=\'preview flex min-h-[350px] w-full justify-center p-10 items-center mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 relative rounded-md border\'>\n                    <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 flex flex-col items-start">\n                            <FormField\n                                control={form.control}\n                                name="topics"\n                                render={({ field }) => (\n                                    <FormItem className="flex flex-col items-start">\n                                        <FormLabel className="text-left">Topics</FormLabel>\n                                        <FormControl>\n                                            <TagInput\n                                                {...field}\n                                                placeholder="Enter a topic"\n                                                tags={tags}\n                                                className=\'sm:min-w-[450px]\'\n                                                setTags={(newTags) => {\n                                                    setTags(newTags);\n                                                    setValue("topics", newTags as [Tag, ...Tag[]]);\n                                                }} \n                                            />\n                                        </FormControl>\n                                        <FormDescription>\n                                            These are the topics that you&apos;re interested in.\n                                        </FormDescription>\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n                            <Button type="submit">Submit</Button>\n                        </form>\n                    </Form>\n                </div>\n                </div>\n            </div>\n        </section>\n    );\n}';
